#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace rtg.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="rtg")]
	public partial class rtgDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPageObject(PageObject instance);
    partial void UpdatePageObject(PageObject instance);
    partial void DeletePageObject(PageObject instance);
    partial void InsertGallery(Gallery instance);
    partial void UpdateGallery(Gallery instance);
    partial void DeleteGallery(Gallery instance);
    partial void InsertGalleryCategory(GalleryCategory instance);
    partial void UpdateGalleryCategory(GalleryCategory instance);
    partial void DeleteGalleryCategory(GalleryCategory instance);
    partial void InsertGalleryImage(GalleryImage instance);
    partial void UpdateGalleryImage(GalleryImage instance);
    partial void DeleteGalleryImage(GalleryImage instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertPageTemplate(PageTemplate instance);
    partial void UpdatePageTemplate(PageTemplate instance);
    partial void DeletePageTemplate(PageTemplate instance);
    #endregion
		
		public rtgDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["rtgConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public rtgDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rtgDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rtgDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rtgDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<PageObject> PageObjects
		{
			get
			{
				return this.GetTable<PageObject>();
			}
		}
		
		public System.Data.Linq.Table<Gallery> Galleries
		{
			get
			{
				return this.GetTable<Gallery>();
			}
		}
		
		public System.Data.Linq.Table<GalleryCategory> GalleryCategories
		{
			get
			{
				return this.GetTable<GalleryCategory>();
			}
		}
		
		public System.Data.Linq.Table<GalleryImage> GalleryImages
		{
			get
			{
				return this.GetTable<GalleryImage>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<PageTemplate> PageTemplates
		{
			get
			{
				return this.GetTable<PageTemplate>();
			}
		}
	}
	
	[Table(Name="dbo.Pages")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageID;
		
		private System.Nullable<int> _ParentID;
		
		private string _Type;
		
		private string _Command;
		
		private string _Title;
		
		private string _MenuTitle;
		
		private System.Nullable<bool> _DisplayInMenu;
		
		private System.Nullable<int> _MenuOrder;
		
		private System.Nullable<int> _TemplateID;
		
		private System.Nullable<bool> _Enabled;
		
		private System.Nullable<int> _Locked;
		
		private System.Nullable<int> _DevelopmentID;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _DateLastModified;
		
		private string _LastModifiedBy;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<PageObject> _PageObjects;
		
		private EntitySet<Gallery> _Galleries;
		
		private EntityRef<Page> _Page1;
		
		private EntityRef<PageTemplate> _PageTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIDChanging(int value);
    partial void OnPageIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnCommandChanging(string value);
    partial void OnCommandChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMenuTitleChanging(string value);
    partial void OnMenuTitleChanged();
    partial void OnDisplayInMenuChanging(System.Nullable<bool> value);
    partial void OnDisplayInMenuChanged();
    partial void OnMenuOrderChanging(System.Nullable<int> value);
    partial void OnMenuOrderChanged();
    partial void OnTemplateIDChanging(System.Nullable<int> value);
    partial void OnTemplateIDChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    partial void OnLockedChanging(System.Nullable<int> value);
    partial void OnLockedChanged();
    partial void OnDevelopmentIDChanging(System.Nullable<int> value);
    partial void OnDevelopmentIDChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDateLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    #endregion
		
		public Page()
		{
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._PageObjects = new EntitySet<PageObject>(new Action<PageObject>(this.attach_PageObjects), new Action<PageObject>(this.detach_PageObjects));
			this._Galleries = new EntitySet<Gallery>(new Action<Gallery>(this.attach_Galleries), new Action<Gallery>(this.detach_Galleries));
			this._Page1 = default(EntityRef<Page>);
			this._PageTemplate = default(EntityRef<PageTemplate>);
			OnCreated();
		}
		
		[Column(Storage="_PageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Page1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Command", DbType="NVarChar(500)")]
		public string Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				if ((this._Command != value))
				{
					this.OnCommandChanging(value);
					this.SendPropertyChanging();
					this._Command = value;
					this.SendPropertyChanged("Command");
					this.OnCommandChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(500)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_MenuTitle", DbType="NVarChar(500)")]
		public string MenuTitle
		{
			get
			{
				return this._MenuTitle;
			}
			set
			{
				if ((this._MenuTitle != value))
				{
					this.OnMenuTitleChanging(value);
					this.SendPropertyChanging();
					this._MenuTitle = value;
					this.SendPropertyChanged("MenuTitle");
					this.OnMenuTitleChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayInMenu", DbType="Bit")]
		public System.Nullable<bool> DisplayInMenu
		{
			get
			{
				return this._DisplayInMenu;
			}
			set
			{
				if ((this._DisplayInMenu != value))
				{
					this.OnDisplayInMenuChanging(value);
					this.SendPropertyChanging();
					this._DisplayInMenu = value;
					this.SendPropertyChanged("DisplayInMenu");
					this.OnDisplayInMenuChanged();
				}
			}
		}
		
		[Column(Storage="_MenuOrder", DbType="Int")]
		public System.Nullable<int> MenuOrder
		{
			get
			{
				return this._MenuOrder;
			}
			set
			{
				if ((this._MenuOrder != value))
				{
					this.OnMenuOrderChanging(value);
					this.SendPropertyChanging();
					this._MenuOrder = value;
					this.SendPropertyChanged("MenuOrder");
					this.OnMenuOrderChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateID", DbType="Int")]
		public System.Nullable<int> TemplateID
		{
			get
			{
				return this._TemplateID;
			}
			set
			{
				if ((this._TemplateID != value))
				{
					if (this._PageTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateID = value;
					this.SendPropertyChanged("TemplateID");
					this.OnTemplateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_Locked", DbType="Int")]
		public System.Nullable<int> Locked
		{
			get
			{
				return this._Locked;
			}
			set
			{
				if ((this._Locked != value))
				{
					this.OnLockedChanging(value);
					this.SendPropertyChanging();
					this._Locked = value;
					this.SendPropertyChanged("Locked");
					this.OnLockedChanged();
				}
			}
		}
		
		[Column(Storage="_DevelopmentID", DbType="Int")]
		public System.Nullable<int> DevelopmentID
		{
			get
			{
				return this._DevelopmentID;
			}
			set
			{
				if ((this._DevelopmentID != value))
				{
					this.OnDevelopmentIDChanging(value);
					this.SendPropertyChanging();
					this._DevelopmentID = value;
					this.SendPropertyChanged("DevelopmentID");
					this.OnDevelopmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(500)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_DateLastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateLastModified
		{
			get
			{
				return this._DateLastModified;
			}
			set
			{
				if ((this._DateLastModified != value))
				{
					this.OnDateLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateLastModified = value;
					this.SendPropertyChanged("DateLastModified");
					this.OnDateLastModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedBy", DbType="NVarChar(500)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[Association(Name="Page_Page", Storage="_Pages", OtherKey="ParentID")]
		public EntitySet<Page> Children
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[Association(Name="Page_PageObject", Storage="_PageObjects", OtherKey="PageID")]
		public EntitySet<PageObject> PageObjects
		{
			get
			{
				return this._PageObjects;
			}
			set
			{
				this._PageObjects.Assign(value);
			}
		}
		
		[Association(Name="Page_Gallery", Storage="_Galleries", OtherKey="PageID")]
		public EntitySet<Gallery> Galleries
		{
			get
			{
				return this._Galleries;
			}
			set
			{
				this._Galleries.Assign(value);
			}
		}
		
		[Association(Name="Page_Page", Storage="_Page1", ThisKey="ParentID", IsForeignKey=true)]
		public Page Parent
		{
			get
			{
				return this._Page1.Entity;
			}
			set
			{
				Page previousValue = this._Page1.Entity;
				if (((previousValue != value) 
							|| (this._Page1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page1.Entity = null;
						previousValue.Children.Remove(this);
					}
					this._Page1.Entity = value;
					if ((value != null))
					{
						value.Children.Add(this);
						this._ParentID = value.PageID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="PageTemplate_Page", Storage="_PageTemplate", ThisKey="TemplateID", IsForeignKey=true)]
		public PageTemplate PageTemplate
		{
			get
			{
				return this._PageTemplate.Entity;
			}
			set
			{
				PageTemplate previousValue = this._PageTemplate.Entity;
				if (((previousValue != value) 
							|| (this._PageTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PageTemplate.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._PageTemplate.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._TemplateID = value.TemplateID;
					}
					else
					{
						this._TemplateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PageTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_PageObjects(PageObject entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_PageObjects(PageObject entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
		
		private void attach_Galleries(Gallery entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_Galleries(Gallery entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[Table(Name="dbo.PageObjects")]
	public partial class PageObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectID;
		
		private System.Nullable<int> _PageID;
		
		private string _Type;
		
		private string _HtmlContent;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnPageIDChanging(System.Nullable<int> value);
    partial void OnPageIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnHtmlContentChanging(string value);
    partial void OnHtmlContentChanged();
    #endregion
		
		public PageObject()
		{
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[Column(Storage="_ObjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_PageID", DbType="Int")]
		public System.Nullable<int> PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HtmlContent", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string HtmlContent
		{
			get
			{
				return this._HtmlContent;
			}
			set
			{
				if ((this._HtmlContent != value))
				{
					this.OnHtmlContentChanging(value);
					this.SendPropertyChanging();
					this._HtmlContent = value;
					this.SendPropertyChanged("HtmlContent");
					this.OnHtmlContentChanged();
				}
			}
		}
		
		[Association(Name="Page_PageObject", Storage="_Page", ThisKey="PageID", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.PageObjects.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.PageObjects.Add(this);
						this._PageID = value.PageID;
					}
					else
					{
						this._PageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Galleries")]
	public partial class Gallery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GalleryID;
		
		private System.Nullable<int> _PageID;
		
		private string _Title;
		
		private System.Nullable<int> _GalleryCategoryID;
		
		private string _Description;
		
		private EntitySet<GalleryImage> _GalleryImages;
		
		private EntityRef<Page> _Page;
		
		private EntityRef<GalleryCategory> _GalleryCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGalleryIDChanging(int value);
    partial void OnGalleryIDChanged();
    partial void OnPageIDChanging(System.Nullable<int> value);
    partial void OnPageIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGalleryCategoryIDChanging(System.Nullable<int> value);
    partial void OnGalleryCategoryIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Gallery()
		{
			this._GalleryImages = new EntitySet<GalleryImage>(new Action<GalleryImage>(this.attach_GalleryImages), new Action<GalleryImage>(this.detach_GalleryImages));
			this._Page = default(EntityRef<Page>);
			this._GalleryCategory = default(EntityRef<GalleryCategory>);
			OnCreated();
		}
		
		[Column(Storage="_GalleryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GalleryID
		{
			get
			{
				return this._GalleryID;
			}
			set
			{
				if ((this._GalleryID != value))
				{
					this.OnGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryID = value;
					this.SendPropertyChanged("GalleryID");
					this.OnGalleryIDChanged();
				}
			}
		}
		
		[Column(Storage="_PageID", DbType="Int")]
		public System.Nullable<int> PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_GalleryCategoryID", DbType="Int")]
		public System.Nullable<int> GalleryCategoryID
		{
			get
			{
				return this._GalleryCategoryID;
			}
			set
			{
				if ((this._GalleryCategoryID != value))
				{
					if (this._GalleryCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGalleryCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryCategoryID = value;
					this.SendPropertyChanged("GalleryCategoryID");
					this.OnGalleryCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Gallery_GalleryImage", Storage="_GalleryImages", OtherKey="GalleryID")]
		public EntitySet<GalleryImage> GalleryImages
		{
			get
			{
				return this._GalleryImages;
			}
			set
			{
				this._GalleryImages.Assign(value);
			}
		}
		
		[Association(Name="Page_Gallery", Storage="_Page", ThisKey="PageID", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.Galleries.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.Galleries.Add(this);
						this._PageID = value.PageID;
					}
					else
					{
						this._PageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		[Association(Name="GalleryCategory_Gallery", Storage="_GalleryCategory", ThisKey="GalleryCategoryID", IsForeignKey=true)]
		public GalleryCategory GalleryCategory
		{
			get
			{
				return this._GalleryCategory.Entity;
			}
			set
			{
				GalleryCategory previousValue = this._GalleryCategory.Entity;
				if (((previousValue != value) 
							|| (this._GalleryCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GalleryCategory.Entity = null;
						previousValue.Galleries.Remove(this);
					}
					this._GalleryCategory.Entity = value;
					if ((value != null))
					{
						value.Galleries.Add(this);
						this._GalleryCategoryID = value.GalleryCategoryID;
					}
					else
					{
						this._GalleryCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GalleryCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GalleryImages(GalleryImage entity)
		{
			this.SendPropertyChanging();
			entity.Gallery = this;
		}
		
		private void detach_GalleryImages(GalleryImage entity)
		{
			this.SendPropertyChanging();
			entity.Gallery = null;
		}
	}
	
	[Table(Name="dbo.GalleryCategories")]
	public partial class GalleryCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GalleryCategoryID;
		
		private string _Title;
		
		private EntitySet<Gallery> _Galleries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGalleryCategoryIDChanging(int value);
    partial void OnGalleryCategoryIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public GalleryCategory()
		{
			this._Galleries = new EntitySet<Gallery>(new Action<Gallery>(this.attach_Galleries), new Action<Gallery>(this.detach_Galleries));
			OnCreated();
		}
		
		[Column(Storage="_GalleryCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GalleryCategoryID
		{
			get
			{
				return this._GalleryCategoryID;
			}
			set
			{
				if ((this._GalleryCategoryID != value))
				{
					this.OnGalleryCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryCategoryID = value;
					this.SendPropertyChanged("GalleryCategoryID");
					this.OnGalleryCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="GalleryCategory_Gallery", Storage="_Galleries", OtherKey="GalleryCategoryID")]
		public EntitySet<Gallery> Galleries
		{
			get
			{
				return this._Galleries;
			}
			set
			{
				this._Galleries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Galleries(Gallery entity)
		{
			this.SendPropertyChanging();
			entity.GalleryCategory = this;
		}
		
		private void detach_Galleries(Gallery entity)
		{
			this.SendPropertyChanging();
			entity.GalleryCategory = null;
		}
	}
	
	[Table(Name="dbo.GalleryImages")]
	public partial class GalleryImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GalleryImageID;
		
		private System.Nullable<int> _GalleryID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Src;
		
		private string _Thumb;
		
		private System.Nullable<int> _Position;
		
		private EntityRef<Gallery> _Gallery;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGalleryImageIDChanging(int value);
    partial void OnGalleryImageIDChanged();
    partial void OnGalleryIDChanging(System.Nullable<int> value);
    partial void OnGalleryIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSrcChanging(string value);
    partial void OnSrcChanged();
    partial void OnThumbChanging(string value);
    partial void OnThumbChanged();
    partial void OnPositionChanging(System.Nullable<int> value);
    partial void OnPositionChanged();
    #endregion
		
		public GalleryImage()
		{
			this._Gallery = default(EntityRef<Gallery>);
			OnCreated();
		}
		
		[Column(Storage="_GalleryImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GalleryImageID
		{
			get
			{
				return this._GalleryImageID;
			}
			set
			{
				if ((this._GalleryImageID != value))
				{
					this.OnGalleryImageIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryImageID = value;
					this.SendPropertyChanged("GalleryImageID");
					this.OnGalleryImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_GalleryID", DbType="Int")]
		public System.Nullable<int> GalleryID
		{
			get
			{
				return this._GalleryID;
			}
			set
			{
				if ((this._GalleryID != value))
				{
					if (this._Gallery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryID = value;
					this.SendPropertyChanged("GalleryID");
					this.OnGalleryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Src", DbType="NVarChar(500)")]
		public string Src
		{
			get
			{
				return this._Src;
			}
			set
			{
				if ((this._Src != value))
				{
					this.OnSrcChanging(value);
					this.SendPropertyChanging();
					this._Src = value;
					this.SendPropertyChanged("Src");
					this.OnSrcChanged();
				}
			}
		}
		
		[Column(Storage="_Thumb", DbType="NVarChar(500)")]
		public string Thumb
		{
			get
			{
				return this._Thumb;
			}
			set
			{
				if ((this._Thumb != value))
				{
					this.OnThumbChanging(value);
					this.SendPropertyChanging();
					this._Thumb = value;
					this.SendPropertyChanged("Thumb");
					this.OnThumbChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Association(Name="Gallery_GalleryImage", Storage="_Gallery", ThisKey="GalleryID", IsForeignKey=true)]
		public Gallery Gallery
		{
			get
			{
				return this._Gallery.Entity;
			}
			set
			{
				Gallery previousValue = this._Gallery.Entity;
				if (((previousValue != value) 
							|| (this._Gallery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gallery.Entity = null;
						previousValue.GalleryImages.Remove(this);
					}
					this._Gallery.Entity = value;
					if ((value != null))
					{
						value.GalleryImages.Add(this);
						this._GalleryID = value.GalleryID;
					}
					else
					{
						this._GalleryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gallery");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingID;
		
		private string _SettingKey;
		
		private string _Tab;
		
		private string _Category;
		
		private string _Label;
		
		private string _Type;
		
		private string _Value;
		
		private System.Nullable<int> _ListOrder;
		
		private System.Nullable<bool> _System;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingIDChanging(int value);
    partial void OnSettingIDChanged();
    partial void OnSettingKeyChanging(string value);
    partial void OnSettingKeyChanged();
    partial void OnTabChanging(string value);
    partial void OnTabChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnListOrderChanging(System.Nullable<int> value);
    partial void OnListOrderChanged();
    partial void OnSystemChanging(System.Nullable<bool> value);
    partial void OnSystemChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[Column(Storage="_SettingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingID
		{
			get
			{
				return this._SettingID;
			}
			set
			{
				if ((this._SettingID != value))
				{
					this.OnSettingIDChanging(value);
					this.SendPropertyChanging();
					this._SettingID = value;
					this.SendPropertyChanged("SettingID");
					this.OnSettingIDChanged();
				}
			}
		}
		
		[Column(Storage="_SettingKey", DbType="NVarChar(100)")]
		public string SettingKey
		{
			get
			{
				return this._SettingKey;
			}
			set
			{
				if ((this._SettingKey != value))
				{
					this.OnSettingKeyChanging(value);
					this.SendPropertyChanging();
					this._SettingKey = value;
					this.SendPropertyChanged("SettingKey");
					this.OnSettingKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Tab", DbType="NVarChar(100)")]
		public string Tab
		{
			get
			{
				return this._Tab;
			}
			set
			{
				if ((this._Tab != value))
				{
					this.OnTabChanging(value);
					this.SendPropertyChanging();
					this._Tab = value;
					this.SendPropertyChanged("Tab");
					this.OnTabChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(100)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Label", DbType="NVarChar(500)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_ListOrder", DbType="Int")]
		public System.Nullable<int> ListOrder
		{
			get
			{
				return this._ListOrder;
			}
			set
			{
				if ((this._ListOrder != value))
				{
					this.OnListOrderChanging(value);
					this.SendPropertyChanging();
					this._ListOrder = value;
					this.SendPropertyChanged("ListOrder");
					this.OnListOrderChanged();
				}
			}
		}
		
		[Column(Storage="_System", DbType="Bit")]
		public System.Nullable<bool> System
		{
			get
			{
				return this._System;
			}
			set
			{
				if ((this._System != value))
				{
					this.OnSystemChanging(value);
					this.SendPropertyChanging();
					this._System = value;
					this.SendPropertyChanged("System");
					this.OnSystemChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PageTemplates")]
	public partial class PageTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateID;
		
		private string _SourceID;
		
		private string _Title;
		
		private string _Description;
		
		private string _PageFile;
		
		private string _Icon;
		
		private System.Nullable<bool> _IsContentEditor;
		
		private string _HtmlContent;
		
		private System.Nullable<bool> _Enabled;
		
		private EntitySet<Page> _Pages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateIDChanging(int value);
    partial void OnTemplateIDChanged();
    partial void OnSourceIDChanging(string value);
    partial void OnSourceIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPageFileChanging(string value);
    partial void OnPageFileChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnIsContentEditorChanging(System.Nullable<bool> value);
    partial void OnIsContentEditorChanged();
    partial void OnHtmlContentChanging(string value);
    partial void OnHtmlContentChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    #endregion
		
		public PageTemplate()
		{
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			OnCreated();
		}
		
		[Column(Storage="_TemplateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TemplateID
		{
			get
			{
				return this._TemplateID;
			}
			set
			{
				if ((this._TemplateID != value))
				{
					this.OnTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateID = value;
					this.SendPropertyChanged("TemplateID");
					this.OnTemplateIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceID", DbType="NVarChar(50)")]
		public string SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(500)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PageFile", DbType="NVarChar(100)")]
		public string PageFile
		{
			get
			{
				return this._PageFile;
			}
			set
			{
				if ((this._PageFile != value))
				{
					this.OnPageFileChanging(value);
					this.SendPropertyChanging();
					this._PageFile = value;
					this.SendPropertyChanged("PageFile");
					this.OnPageFileChanged();
				}
			}
		}
		
		[Column(Storage="_Icon", DbType="NVarChar(500)")]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[Column(Storage="_IsContentEditor", DbType="Bit")]
		public System.Nullable<bool> IsContentEditor
		{
			get
			{
				return this._IsContentEditor;
			}
			set
			{
				if ((this._IsContentEditor != value))
				{
					this.OnIsContentEditorChanging(value);
					this.SendPropertyChanging();
					this._IsContentEditor = value;
					this.SendPropertyChanged("IsContentEditor");
					this.OnIsContentEditorChanged();
				}
			}
		}
		
		[Column(Storage="_HtmlContent", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string HtmlContent
		{
			get
			{
				return this._HtmlContent;
			}
			set
			{
				if ((this._HtmlContent != value))
				{
					this.OnHtmlContentChanging(value);
					this.SendPropertyChanging();
					this._HtmlContent = value;
					this.SendPropertyChanged("HtmlContent");
					this.OnHtmlContentChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[Association(Name="PageTemplate_Page", Storage="_Pages", OtherKey="TemplateID")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.PageTemplate = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.PageTemplate = null;
		}
	}
}
#pragma warning restore 1591
